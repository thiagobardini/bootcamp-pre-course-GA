<!DOCTYPE html>
<html lang="en">

<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Practice Using Event Listeners</title>
</head>

<body>
   <button id="generate-greeting">Hello</button>
   <br />
   <br />
   <label for="new-todo">Add a new item to the list:</label>
   <input id="new-todo" type="text">
   <button id="generate-todo">Add to the List!</button>
   <h1>List of things to do</h1>
   <ul class="todos">
   </ul>

   <script>
      // PROBLEM 1
      // Add an event listener to the button with the generate-greeting id
      // When the button is clicked, trigger the sayHello function
      function sayHello() {
         console.log("hello!")
      }

      document.getElementById('generate-greeting').addEventListener('click', sayHello);


      // PROBLEM 2
      // When the user clicks the "Add to the List!" button:
      // 1) Add a new li to the .todos ul
      // 2) Fill in the li with the text from the input field
      // 3) Reset the value of the input field to be empty
      function addToDo() {
         const text = document.getElementById('new-todo').value;   // value return any value from  the #new-todo input
         const newItem = document.createElement('li');
         newItem.innerText = text;
         newItem.onclick = function (e) { // added from problem 3 below
            e.target.style['text-decoration'] = 'line-through';
            // added from problem 3 ->e = event object | style from CSS
         }
         document.querySelector('.todos').appendChild(newItem);
         document.getElementById('new-todo').value = null;
      }

      document.getElementById('generate-todo').addEventListener('click', addToDo);

// PROBLEM 3
// When the user clicks any of the li items you've added, cross it out (add styling to create the line through effect)
// This will involve attaching a listener to each <li> as you add them
// You will have to modify the code you've written above!
   </script>
</body>

</html>